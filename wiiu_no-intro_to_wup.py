#!/usr/bin/env python3

# encrypted titlekey is decrypted with the Wii U Common Key
# with IV being TID + 0x00 padding

# contents are decrypted with the decrypted titlekey
# with IV being all 0x00, or index bytes + 0x00 padding

import binascii
import hashlib
import os
import struct
import sys
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

# put the common key here to decrypt things
wiiu_common_key = ''

##########################

wiiu_common_key_hash = hashlib.sha1(wiiu_common_key.encode('utf-8').upper())
if wiiu_common_key_hash.hexdigest() != 'e3fbc19d1306f6243afe852ab35ed9e1e4777d3a':
    sys.exit('Wrong Wii U Common Key. Place the correct one in the script.')

ckey = binascii.unhexlify(wiiu_common_key)

readsize = 8 * 1024 * 1024

if os.path.isfile('tmd.0'):
    os.rename('tmd.0', 'title.tmd')

if not os.path.isfile('title.tmd'):
    sys.exit('No TMD (title.tmd) was found.')

def show_progress(val, maxval, cid):
    # crappy workaround I bet, but print() didn't do what I wanted
    minval = min(val, maxval)
    sys.stdout.write('\rDecrypting {}...  {:>5.1f}% {:>10} / {:>10} ({} MiB)'.format(cid, (minval / maxval) * 100, minval, maxval, maxval / (1024 ** 2)))
    sys.stdout.flush()

def show_chunk(num, count, cid):
    # crappy workaround I bet, but print() didn't do what I wanted
    sys.stdout.write('\rDecrypting {}...  Chunk  {:>10} / {:>10} ({} MiB)'.format(cid, num + 1, count, (count * 0x10000) / (1024 ** 2)))
    sys.stdout.flush()

# find title id and content id
title_id = b''
contents = []
content_count = 0
with open('title.tmd', 'rb') as tmd:
    tmd.seek(0x18C)
    title_id = tmd.read(8)

    tmd.seek(0x1DE)
    content_count = struct.unpack('>H', tmd.read(2))[0]

    tmd.seek(0x204)
    tmd_index = tmd.read(2)[::-1]

    for c in range(content_count):
        tmd.seek(0xB04 + (0x30 * c))
        content_id = tmd.read(0x4).hex()

        tmd.seek(0xB08 + (0x30 * c))
        content_index = tmd.read(0x2)

        tmd.seek(0xB0A + (0x30 * c))
        content_type = struct.unpack('>H', tmd.read(2))[0]

        tmd.seek(0xB0C + (0x30 * c))
        content_size = struct.unpack('>Q', tmd.read(8))[0]

        # content_size = os.path.getsize(content_id)
        tmd.seek(0xB14 + (0x30 * c))
        content_hash = tmd.read(0x14)

        contents.append({
            'id': content_id,
            'index': content_index,
            'type': content_type,
            'size': content_size,
            'hash': content_hash,
        })

print('Title ID:               ' + title_id.hex().upper())

# find encrypted titlekey
encrypted_titlekey = b''
titlekeys_ovh_ticket_filename = title_id.hex()+'.tik'
nus_ticket_filename = 'title.tik'
if os.path.isfile(titlekeys_ovh_ticket_filename):
    os.rename(titlekeys_ovh_ticket_filename, nus_ticket_filename)
if os.path.isfile(nus_ticket_filename):
    with open(nus_ticket_filename, 'rb') as cetk:
        cetk.seek(0x1BF)
        encrypted_titlekey = cetk.read(0x10)
elif len(sys.argv) > 1:
    encrypted_titlekey = binascii.unhexlify(sys.argv[1])
else:
    sys.exit('Missing CETK (title.tik). Please add an argument containing the encrypted titlekey.')

print('Encrypted Titlekey:     ' + encrypted_titlekey.hex().upper())

# yolo certificate
with open('title.cert', 'wb') as cert:
    cert.write(b'\x00\x01\x00\x04.\xa6lf\xcf\xf35y}\x04\x97\xb7z\x19\x7f\x9f\xe5\x1a\xb5\xa4\x13u\xdcs\xfd\x9e\x0b\x10f\x9b\x1b\x9a[~\x8a\xb2\x8f\x01\xb6{bT\xc1J\xa13\x14\x18\xf2[\xa5I\x00L7\x8d\xd7/\x0c\xe6;\x1fp\x91\xaa\xfe8\t\xb7\xacl(v\xa6\x1d`QlC\xa67)\x16-(\x0b\xe2\x1b\xe8\xe2\xfe\x05}\x8e\xb6\xe2\x04$"Es\x1a\xb6\xfe\xe3\x0eS57>\xeb\xa9p\xd51\xbb\xa2\xcb"-\x96\x848}_*\x1b\xf7R\x00\xce\x06V\xe3\x90\xce\x19\x13[Y\xe1O\x0f\xa5\xc1(\x1as\x86\xcc\xd1\xc8\xec?\xadp\xfb\xcet\xde\xee\x1f\xd0_F3\x0bQ\xf9\xb7\x9e\x1d\xdb\xf4\xe3?\x14\x88\x9d\x05()$\xc5\xf5\xdc\'f\xef\x06\'\xd7\xee\xdcsng\xc2\xe5\xb984f\x80r!m\x1cx\xb8#\xa0r\xd3O\xf3\xec\xf9\xbd\x11\xa2\x9a\xf1l3\xbd\t\xaf\xb2\xd7MSN\x02|\x19$\rYZh\xeb\xb3\x05\xac\xc4J\xb3\x8a\xb8 \xc6\xd4&V\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Root-CA00000003\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01CP0000000b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13z\x08\x0b\xa6\x89\xc5\x90\xfd\x0b/\rOV\xb62\xfb\x93N\xd0s\x95\x17\xb3:y\xde\x04\x0e\xe9-\xc3\x1d7\xc7\xf7;\xf0K\xd3\xe4N \xabZo\xea\xf5\x98L\xc1\xf6\x06.\x9a\x9f\xe5l2\x85\xdco%\xdd\xd5\xd0\xbf\x9f\xe2\xef\xe85\xdf&4\xed\x93\x7f\xab\x02\x14\xd1\x04\x80\x9c\xf7K\x86\x0ek\x04\x83\xf4\xcd-\xab*\x96\x02\xbcV\xf0\xd6\xbd\x94j\xedn\x0b\xe4\xf0\x8f&hk\xd0\x9e\xf7\xdb2_\x82\xb1\x8fj\xf2\xedR[\xfd\x82\x8be?\xeen\xce@\rZH\xff\xe2-S\x8b\xb53[AS4-C5\xac\xf5\x90\xd0\xd3\n\xe2\x04<\x7fZ\xd2\x14\xfc\x9c\x0f\xe6\xfa@\xa5\xc8e\x06\xcaci\xbc\xeeD\xa3-\x9ei\\\xf0\x0bO\xd7\x9a\xdbV\x8d\x14\x9c (\xa1L\x9dq\xb8P\xca6[7\xf7\x0bew\x91\xfc]r\x8cN\x18\xfd"U|@b\xd7GqS<p\x17\x9d=\xae\x8f\x92\xb1\x17\xe4\\\xb32\xf3\xb3\xc2\xa2.p\\\xfe\xc6om\xa3w+\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x03pA8\xef\xbb\xbd\xa1j\x98}\xd9\x012m\x1c\x94YHL\x88\xa2\x86\x1b\x91\xa3\x12Xz\xe7\x0e\xf6#~\xc5\x0e\x102\xdc9\xdd\xe8\x9a\x96\xa8\xe8Y\xd7j\x98\xa6\xe7\xe3j\x0c\xfe5,\xa8\x93\x05\x824\xff\x83?\xcb;\x03\x81\x1e\x9f\r\xc0\xd9\xa5/\x80E\xb4\xb2\xf9A\x1bg\xa5\x1cD\xb5\xef\x8c\xe7{\xd6\xd5k\xa7W4\xa1\x85m\xe6\xd4\xbe\xd6\xd3\xa2B\xc7\xc8y\x1b4"7^\\w\x9a\xbf\x07/v\x95\xef\xa0\xf7[\xcb\x83x\x9f\xc3\x0e?\xe4\xcc\x83\x92 x@c\x89I\xc7\xf6\x88V_d\x9bt\xd6=\x8dX\xff\xad\xdaW\x1e\x95TBk\x13\x18\xfcF\x89\x83\xd4\xc8\xa5b\x8b\x06\xb6\xfc]P|\x13\xe7\xa1\x8a\xc1Q\x1e\xb6\xd6.\xa5D\x8f\x83P\x14G\xa9\xaf\xb3\xec\xc2\x90<\x9d\xd5/\x92*\xc9\xac\xdb\xefX\xc6\x02\x18H\xd9n \x872\xd3\xd1\xd9\xd9\xeaD\r\x91b\x1cz\x99\xdb\x88C\xc5\x9c\x1f.,}\x9bW}Q,\x16mo~\x1a\xadJwJ7D~x\xfe !\xe1J\x95\xd1\x12\xa0h\xad\xa0\x19\xf4c\xc7\xa5V\x85\xaa\xbbh\x88\xb9$d\x83\xd1\x8b\x9c\x80oGI\x183\x17\x824JK\x8513K&02c\xd9\xd2\xebOK\xb9\x96\x02\xb3R\xf6\xae@F\xc6\x9a^~\x8eJ\x18\xef\x9b\xc0\xa2\xde\xd6\x13\x10Ap\x12\xfd\x82L\xc1\x16\xcf\xb7\xc4\xc1\xf7\xecqw\xa1tF\xcb\xde\x96\xf3\xed\xd8\x8f\xcd\x05/\x0b\x88\x8aE\xfd\xaf+c\x13T\xf4\r\x16\xe5\xfa\x9c,N\xda\x98\xe7\x98\xd1^`F\xdcSc\xf3\tk,`z\x9d\x8d\xd5[\x15\x02\xa6\xac}<\xc8\xd8\xc5u\x99\x8e}yi\x10\xc8\x04\xc4\x95#PW\xe9\x1e\xcd&7\xc9\xc1\x84QQ\xack\x9a\x04\x90\xae>\xc6\xf4w@\xa0\xdb\x0b\xa3m\x07YV\xce\xe75N\xa3\xe9\xa4\xf2r\x0b&U\x0c}9C$\xbc\x0c\xb7\xe91}\x8a\x86a\xf4!\x91\xff\x10\xb0\x82V\xce?\xd2[t^Q\x94\x90kMa\xcbL.\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Root\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01CA00000003\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{\xe8\xefl\xb2y\xc9\xe2\xee\xe1!\xc6\xea\xf4O\xf69\xf8\x8f\x07\x8bKw\xed\x9f\x95`\xb05\x82\x81\xb5\x0eU\xabr\x11\x15\xa1wp<z0\xfe:\xe9\xef\x1c`\xbc\x1d\x97Fv\xb2:h\xcc\x04\xb1\x98R[\xc9h\xf1\x1d\xe2\xdbP\xe4\xd9\xe7\xf0q\xe5b\xda\xe2\t"3\xe9\xd3c\xf6\x1d\xd7\xc1\x9f\xf3\xa4\xa9\x1e\x8feS\xd4q\xdd{\x84\xb9\xf1\xb8\xces5\xf0\xf5T\x05c\xa1\xea\xb89c\xe0\x9b\xe9\x01\x01\x1f\x99Tca(p \xe9\xcc\r\xabH\x7f\x14\rf&\xa1\x83m\'\x11\x1f h\xdeGr\x14\x91Q\xcfi\xc6\x1b\xa6\x0e\xf9\xd9I\xa0\xf7\x1fT\x99\xf2\xd3\x9a\xd2\x8cp\x054\x82\x93\xc41\xff\xbd3\xf6\xbc\xa6\r\xc7\x19^\xa2\xbc\xc5m \x0b\xafm\x06\xd0\x9cA\xdb\x8d\xe9\xc7 \x15L\xa4\x83+i\xc0\x8ci\xcd;\x07:\x00c`/F-3\x80a\xa5\xeal\x91\\\xd5b5y\xc3\xebd\xceD\xefXm\x14\xba\xaa\x884\x01\x9b>\xeb\xee\xd3y\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x04\x91\x9e\xbeFJ\xd0\xf5R\xcd\x1br\xe7\x88I\x10\xcfU\xa9\xf0.Px\x96A\xd8\x96h=\xc0\x05\xbd\n\xea\x87\x07\x9d\x8a\xc2\x84\xc6u\x06_t\xc8\xbf7\xc8\x80D@\x95\x02\xa0"\x98\x0b\xb8\xadH8?m(\xa7\x9d\xe3\x96&\xcc\xb2\xb2*\x0f\x19\xe4\x102\xf0\x94\xb3\x9f\xf0\x131F\xde\xc8\xf6\xc1\xa9\xd5\\\xd2\x8d\x9e\x1cG\xb3\xd1\x1fOT&\xc2\xc7\x80\x13Z\'u\xd3\xcag\x9b\xc7\xe84\xf0\xe0\xfbX\xe6\x88`\xa7\x130\xfc\x95y\x17\x93\xc8\xfb\xa95\xa7\xa6\x90\x8f"\x9d\xee*\x0c\xa6\xb9\xb2;\x12\xd4\x95\xa6\xfe\x19\xd0\xd7&H!hx`ZfS\x8d\xbf7h\x99\x90]4E\xfc\\rz\x0e\x13\xe0\xe2\xc8\x97\x1c\x9c\xfal`g\x88us*NuR=/V/\x12\xaa\xbd\x15s\xbf\x06\xc9@T\xae\xfa\x81\xa7\x14\x17\xaf\x9aJ\x06m\x0f\xfcZ\xd6K\xab(\xb1\xff`f\x1fD7\xd4\x9e\x1e\r\x94\x12\xebK\xca\xcfL\xfdj4\x08\x84y\x82\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Root-CA00000003\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01XS0000000c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13z\x08\x94\xadP[\xb6\xc6~.[\xddj;\xecC\xd9\x10\xc7r\xe9\xcc)\r\xa5\x85\x88\xb7}\xcc\x11h\x0b\xb3\xe2\x9fN\xab\xbb&\xe9\x8c&\x01\x98\\\x04\x1b\xb1Cx\xe6\x89\x18\x1a\xadw\x05h\xe9(\xa2\xb9\x81g\xee>\x10\xd0r\xbe\xef\x1f\xa2/\xa2\xaa>\x13\xf1\x1e\x186\xa9*B\x81\xefp\xaa\xf4\xe4b\x99\x82!\xc6\xfb\xb9\xbd\xd0\x17\xe6\xacY\x04\x94\xe9\xce\xa9\x85\x9c\xeb-*L\x17f\xf2\xc39\x12\xc5\x8f\x14\xa8\x03\xe3o\xcc\xdc\xcc\xdc\x13\xfdz\xe7|zx\xd9\x97\xe6\xac\xc3UW\xe0\xd3\xe9\xebd\xb4<\x92\xf4\xc5\rg\xa6\x02\xde\xb3\x91\xb0fa\xcd2\x88\x0b\xd6I\x12\xaf\x1c\xbc\xb7\x16*\x06\xf0%e\xd3\xb0\xec\xe4\xfc\xec\xdd\xae\x8aI4\xdb\x8e\xe6\x7f0\x17\x98b!\x15]\x13\x1cl?\t\xab\x19E\xc2\x06\xacp\xc9B\xb3oI\xa1\x18;\xcdx\xb6\xe4\xb4|l\\\xac\x0f\x8db\xf8\x97\xc6\x95=\xd1/(\xb7\x0c[}\xf7Q\x81\x9a\x984e&%\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')

# decryption fun
cipher_titlekey = Cipher(algorithms.AES(ckey), modes.CBC(title_id + bytes(8)), backend=default_backend()).decryptor()
decrypted_titlekey = cipher_titlekey.update(encrypted_titlekey) + cipher_titlekey.finalize()
print('Decrypted Titlekey:     ' + decrypted_titlekey.hex().upper())

for content in contents:
    h3_hashes = []
    print('Decrypting {}...'.format(content['id']), end='')
    os.rename(content['id'], content['id'] + '.app')
    left = os.path.getsize(content['id'] + '.app')  # set to file size
    left_hash = content['size']  # set to tmd size (can differ to filesize)

    if content['type'] & 2:  # if has a hash tree
        chunk_count = left // 0x10000
        chunk_num = 0

        h0_hash_num = 0
        h1_hash_num = 0
        h2_hash_num = 0
        h3_hash_num = 0

        with open(content['id'] + '.app', 'rb') as encrypted:
            for chunk_num in range(chunk_count):
                show_chunk(chunk_num, chunk_count, content['id'])
                # decrypt and verify hash tree
                cipher_hash_tree = Cipher(algorithms.AES(decrypted_titlekey), modes.CBC(bytes(16)), backend=default_backend()).decryptor()
                hash_tree = cipher_hash_tree.update(encrypted.read(0x400)) + cipher_hash_tree.finalize()
                h0_hashes = hash_tree[0:0x140]
                h1_hashes = hash_tree[0x140:0x280]
                h2_hashes = hash_tree[0x280:0x3c0]

                h0_hash = h0_hashes[(h0_hash_num * 0x14):((h0_hash_num + 1) * 0x14)]
                h1_hash = h1_hashes[(h1_hash_num * 0x14):((h1_hash_num + 1) * 0x14)]
                h2_hash = h2_hashes[(h2_hash_num * 0x14):((h2_hash_num + 1) * 0x14)]
                if hashlib.sha1(h0_hashes).digest() != h1_hash:
                    print('\rH0 Hashes invalid in chunk {}'.format(chunk_num))
                if hashlib.sha1(h1_hashes).digest() != h2_hash:
                    print('\rH1 Hashes invalid in chunk {}'.format(chunk_num))
                if hashlib.sha1(h2_hashes).digest() not in h3_hashes:
                    h3_hashes.append(hashlib.sha1(h2_hashes).digest())

                iv = h0_hash[0:0x10]
                cipher_content = Cipher(algorithms.AES(decrypted_titlekey), modes.CBC(iv), backend=default_backend()).decryptor()
                decrypted_data = cipher_content.update(encrypted.read(0xFC00)) + cipher_content.finalize()
                if hashlib.sha1(decrypted_data).digest() != h0_hash:
                    print('\rData block hash invalid in chunk {}'.format(chunk_num))

                h0_hash_num += 1
                if h0_hash_num >= 16:
                    h0_hash_num = 0
                    h1_hash_num += 1
                if h1_hash_num >= 16:
                    h1_hash_num = 0
                    h2_hash_num += 1
                if h2_hash_num >= 16:
                    h2_hash_num = 0
                    h3_hash_num += 1
            print('')
            with open(content['id'] + '.h3', 'wb') as h3:
                h3.write(b''.join(h3_hashes))
